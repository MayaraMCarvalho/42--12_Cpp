/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ShrubberyCreationForm.cpp                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: macarval <macarval@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/04/24 15:03:26 by macarval          #+#    #+#             */
/*   Updated: 2024/04/25 17:14:27 by macarval         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ShrubberyCreationForm.hpp"

// Constructor & Destructor ===================================================
ShrubberyCreationForm::ShrubberyCreationForm( std::string target )
								: AForm("Shrubbery Creation", 145, 137)
{
	this->_target = target;
}

ShrubberyCreationForm::ShrubberyCreationForm( ShrubberyCreationForm const &copy )
																: AForm(copy)
{
	*this = copy;
}

ShrubberyCreationForm::~ShrubberyCreationForm( void )
{
}

// Operators ==============================================================
ShrubberyCreationForm& ShrubberyCreationForm::operator=( ShrubberyCreationForm const &other )
{
	if (this != &other)
	{
		this->_target = other._target;
	}
	return *this;
}

// Methods ================================================================
static void	drawTrees(std::string fileName)
	throw(std::ios_base::failure)
{
	std::ofstream file(fileName.c_str(), std::ios_base::app);
	if (!file.is_open() || file.fail())
		throw(std::ios_base::failure("Error creating the file"));
	file << "                  Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶                                             Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "               Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶                                       Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "                 Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶    Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶                              Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶    Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "                 Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶  Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶                            Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶  Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "       Â¶Â¶Â¶Â¶Â¶Â¶Â¶    Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶                Â¶Â¶Â¶Â¶Â¶Â¶Â¶    Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "    Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶            Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "  Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶         Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶" << std::endl;
	file << "Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶              Â¶Â¶      Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶              Â¶Â¶" << std::endl;
	file << "Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶      Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶   Â¶      Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶      Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶   Â¶" << std::endl;
	file << "  Â¶Â¶Â¶Â¶     Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶         Â¶Â¶Â¶Â¶    Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "   Â¶Â¶  Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶  Â¶Â¶Â¶Â¶Â¶       Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶       Â¶Â¶  Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶  Â¶Â¶Â¶Â¶Â¶       Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "   Â¶  Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶        Â¶Â¶Â¶Â¶Â¶         Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶       Â¶  Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶        Â¶Â¶Â¶Â¶Â¶         Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "      Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶         Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶         Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "      Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶            Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶            Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "      Â¶Â¶Â¶Â¶Â¶Â¶              Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶              Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "      Â¶Â¶Â¶Â¶Â¶                Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶                Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "       Â¶Â¶Â¶Â¶                 Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶           Â¶Â¶Â¶Â¶                 Â¶Â¶Â¶Â¶Â¶Â¶          Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "       Â¶Â¶                  Â¶Â¶Â¶Â¶Â¶Â¶Â¶         Â¶Â¶Â¶Â¶               Â¶Â¶                  Â¶Â¶Â¶Â¶Â¶Â¶Â¶         Â¶Â¶Â¶Â¶" << std::endl;
	file << "       Â¶Â¶                   Â¶Â¶Â¶Â¶Â¶Â¶Â¶         Â¶Â¶               Â¶Â¶                   Â¶Â¶Â¶Â¶Â¶Â¶Â¶         Â¶Â¶" << std::endl;
	file << "       Â¶                    Â¶Â¶Â¶Â¶Â¶Â¶Â¶         Â¶                Â¶                    Â¶Â¶Â¶Â¶Â¶Â¶Â¶         Â¶" << std::endl;
	file << "                             Â¶Â¶Â¶Â¶Â¶Â¶                                                Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "                             Â¶Â¶Â¶Â¶Â¶Â¶Â¶                                               Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "                             Â¶Â¶Â¶Â¶Â¶Â¶Â¶                                               Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "                           Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶                                             Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "                        Â¶Â¶Â¶111Â¶Â¶Â¶Â¶Â¶Â¶Â¶                                          Â¶Â¶Â¶111Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "                 Â¶Â¶Â¶Â¶Â¶Â¶111111111Â¶Â¶Â¶Â¶Â¶Â¶Â¶                                 Â¶Â¶Â¶Â¶Â¶Â¶111111111Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "               Â¶Â¶1111111111111111Â¶Â¶Â¶Â¶Â¶Â¶Â¶                              Â¶Â¶1111111111111111Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "     Â¶Â¶Â¶Â¶Â¶1111111111111Â¶1111Â¶Â¶Â¶Â¶Â¶Â¶Â¶1111Â¶Â¶Â¶                 Â¶Â¶Â¶Â¶Â¶1111111111111Â¶1111Â¶Â¶Â¶Â¶Â¶Â¶Â¶1111Â¶Â¶Â¶" << std::endl;
	file << "  Â¶Â¶Â¶Â¶Â¶Â¶1111111111111111111Â¶Â¶11Â¶Â¶Â¶Â¶Â¶Â¶Â¶11Â¶Â¶Â¶Â¶            Â¶Â¶Â¶Â¶Â¶Â¶1111111111111111111Â¶Â¶11Â¶Â¶Â¶Â¶Â¶Â¶Â¶11Â¶Â¶Â¶Â¶" << std::endl;
	file << "Â¶Â¶1111111111111111111111110nÂ¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶            Â¶Â¶1111111111111111111111110nÂ¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;
	file << "11111111111111111111111111111Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶            11111111111111111111111111111Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶" << std::endl;

	file.close();
	std::cout << YELLOW << fileName << "ðŸŒ³ created successfully!!\n\n";
	std::cout << RESET;
}

void ShrubberyCreationForm::execute(Bureaucrat const &executor) const
	throw (FormNotSignedException, GradeTooLowException)
{
	AForm::execute(executor);
	drawTrees(_target + "_shrubbery");
}
